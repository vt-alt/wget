diff --git a/wget/lib/intprops.h b/wget/lib/intprops.h
index 85ed61f..170729e 100644
--- a/wget/lib/intprops.h
+++ b/wget/lib/intprops.h
@@ -236,11 +236,13 @@ verify (TYPE_WIDTH (unsigned int) == UINT_WIDTH);
    ? (a) < (min) >> (b)                                 \
    : (max) >> (b) < (a))
 
+# if !(defined __LCC__ && __LCC__ <= 123)
 /* True if __builtin_add_overflow (A, B, P) works when P is non-null.  */
 #define _GL_HAS_BUILTIN_OVERFLOW (5 <= __GNUC__)
 
 /* True if __builtin_add_overflow_p (A, B, C) works.  */
 #define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
+#endif
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
diff --git a/wget/lib/xalloc-oversized.h b/wget/lib/xalloc-oversized.h
index ff0efc6..a0ccd43 100644
--- a/wget/lib/xalloc-oversized.h
+++ b/wget/lib/xalloc-oversized.h
@@ -44,7 +44,7 @@ typedef size_t __xalloc_count_type;
 #if 7 <= __GNUC__
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
-#elif 5 <= __GNUC__ && !__STRICT_ANSI__
+#elif 5 <= __GNUC__ && !__STRICT_ANSI__ && !(defined __LCC__ && __LCC__ <= 123)
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
